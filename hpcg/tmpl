#!/usr/bin/perl

use strict;
use warnings;
use CGI 'header';
use Text::MultiMarkdown 'markdown';

my $DOCROOT = '/var/repo/hpcg';

main();

#---------------------------------------------------

sub diag {
   print header();
   print shift;
   exit;
}

sub request {
  # Given an HTTP document request, determine which file to return
  my $file = $DOCROOT . shift;
  for('', '.md', '/index.md', '.html', '/index.html'){
    return($file.$_,200) if -f $file.$_;
  }
  return '404.md',404;
}

sub getfile {
  # Return the contents of a given file
  my $file = shift;
  return "Error fetching file $file" unless -e $file;
  open(IN, $file) or return;
  my $out = join('', <IN>);
  close IN;
  return $out;
}

sub update {
   chdir $DOCROOT;
   print header(), `git pull 2>&1`;
   return 1;
}

sub main {
  my $path = $ENV{PATH_INFO} || '';
  return update() if $ENV{QUERY_STRING} eq 'update';
  my ($file, $status) = request($path);
  my $content = markdown( getfile $file );
  my ($title) = $content =~ /<h1[^>]*>(.+)<\/h1>/;
  my ($tmpl_file) = $content =~ /<!-- TMPL=(\S+) -->/;
  $tmpl_file ||= 'tmpl.html';
  my $tmpl = getfile("$DOCROOT/$tmpl_file");
  $tmpl =~ s/CONTENT/$content/s;
  $tmpl =~ s/TITLE/$title/sg;

  print header(
    -status => $status,
    -charset => 'UTF-8',
    );
  print $tmpl;
}
